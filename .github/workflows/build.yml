name: Build Game Libraries

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 4

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_suffix: linux-x86_64
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y cmake build-essential pkg-config \
                libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev \
                libxss-dev libxxf86vm-dev libasound2-dev libpulse-dev libudev-dev libgl1-mesa-dev \
                libegl1-mesa-dev libgles2-mesa-dev libwayland-dev libxkbcommon-dev wayland-protocols

          - os: windows-latest
            platform: windows  
            artifact_suffix: windows-x86_64
            install_deps: ""

          - os: macos-latest
            platform: macos
            artifact_suffix: macos-x86_64
            install_deps: ""

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Cache prebuilt libraries
      uses: actions/cache@v4
      with:
        path: |
          prebuilt/
          build/
        key: ${{ runner.os }}-gamelibs-${{ hashFiles('build_*.py', 'build_local.sh') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-gamelibs-${{ hashFiles('build_*.py', 'build_local.sh') }}-
          ${{ runner.os }}-gamelibs-

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      if: matrix.install_deps != ''
      run: ${{ matrix.install_deps }}

    - name: Install Visual Studio Build Tools (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    - name: Build core libraries (SDL2, FreeType, cimgui, LuaJIT)
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          ./build_local.sh
        else
          echo "Cross-platform build not yet implemented for ${{ matrix.os }}"
          # TODO: Implement Windows/macOS builds
          exit 0
        fi
      shell: bash

    - name: Build SDL_image
      if: matrix.os == 'ubuntu-latest'
      run: python3 build_sdl_image.py
      shell: bash

    - name: Build SDL_mixer  
      if: matrix.os == 'ubuntu-latest'
      run: python3 build_sdl_mixer.py
      shell: bash

    - name: Test libraries (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        export LD_LIBRARY_PATH="$(pwd)/prebuilt/${{ matrix.platform }}/x86_64/lib:$LD_LIBRARY_PATH"
        export DYLD_LIBRARY_PATH="$(pwd)/prebuilt/${{ matrix.platform }}/x86_64/lib:$DYLD_LIBRARY_PATH"
        timeout 5 luajit gl.lua || echo "Test completed (expected timeout)"

    - name: List built libraries
      run: |
        echo "=== Built libraries ==="
        find prebuilt/${{ matrix.platform }}/x86_64 -name "*.so" -o -name "*.dylib" -o -name "*.dll" -o -name "*.a" -o -name "*.lib" | sort
      shell: bash

    - name: Package libraries
      run: |
        cd prebuilt/${{ matrix.platform }}/x86_64
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ../../../gamelibs-${{ matrix.artifact_suffix }}.zip . -r
        else
          tar -czf ../../../gamelibs-${{ matrix.artifact_suffix }}.tar.gz .
        fi
        cd ../../..
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gamelibs-${{ matrix.artifact_suffix }}
        path: |
          gamelibs-${{ matrix.artifact_suffix }}.*
        retention-days: 30

  # Create release on tag push
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Prepare release assets
      run: |
        mkdir release-assets
        # Move all artifacts to release assets directory
        find . -name "gamelibs-*.tar.gz" -o -name "gamelibs-*.zip" | while read file; do
          mv "$file" release-assets/
        done
        ls -la release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        body: |
          # Game Libraries Release ${{ github.ref_name }}
          
          Precompiled game development libraries for Rock projects.
          
          ## Included Libraries
          - **SDL2** - Cross-platform multimedia library
          - **cimgui** - ImGui C bindings with SDL2/OpenGL3 backends  
          - **LuaJIT** - Just-in-time compiler for Lua
          - **SDL_image** - Image loading library (PNG, JPG, WebP support)
          - **SDL_mixer** - Audio mixing library (WAV, OGG, FLAC, MP3 support)
          - **FreeType** - Font rendering library
          
          ## Usage
          Download the appropriate archive for your platform and extract to your project.
          
          ## Platforms
          - **Linux x86_64** - `gamelibs-linux-x86_64.tar.gz`
          - **Windows x86_64** - `gamelibs-windows-x86_64.zip`  
          - **macOS x86_64** - `gamelibs-macos-x86_64.tar.gz`
          
          Built automatically via GitHub Actions.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}