name: Build Game Libraries

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    name: Build Ubuntu x86_64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          libasound2-dev \
          libpulse-dev \
          libaudio-dev \
          libjack-dev \
          libsndio-dev \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxfixes-dev \
          libxi-dev \
          libxinerama-dev \
          libxxf86vm-dev \
          libxss-dev \
          libgl1-mesa-dev \
          libdbus-1-dev \
          libudev-dev \
          libgles2-mesa-dev \
          libegl1-mesa-dev \
          libibus-1.0-dev \
          fcitx-libs-dev \
          libsamplerate0-dev \
          libpipewire-0.3-dev \
          libwayland-dev \
          libdecor-0-dev \
          libdrm-dev \
          libgbm-dev \
          libpng-dev \
          zlib1g-dev \
          libbz2-dev
    
    - name: Initialize submodules
      run: |
        git submodule update --init --recursive
    
    - name: Create build directories
      run: |
        mkdir -p build/SDL2
        mkdir -p build/freetype
        mkdir -p build/cimgui
        mkdir -p prebuilt/linux/x86_64
    
    - name: Build SDL2
      run: |
        cd build/SDL2
        cmake ../../SDL2-2.32.4 \
          -GNinja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PWD/../../prebuilt/linux/x86_64 \
          -DSDL_SHARED=ON \
          -DSDL_STATIC=ON \
          -DSDL_ALSA=ON \
          -DSDL_PULSEAUDIO=ON \
          -DSDL_X11=ON \
          -DSDL_WAYLAND=ON \
          -DSDL_OPENGL=ON \
          -DSDL_OPENGLES=ON \
          -DSDL_VULKAN=ON
        ninja -j$(nproc)
        ninja install
    
    - name: Build FreeType
      run: |
        cd build/freetype
        cmake ../../freetype-2.14.1 \
          -GNinja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PWD/../../prebuilt/linux/x86_64 \
          -DBUILD_SHARED_LIBS=ON \
          -DFT_DISABLE_HARFBUZZ=ON \
          -DFT_DISABLE_BROTLI=ON
        ninja -j$(nproc)
        ninja install
    
    - name: Build cimgui (ImGui C wrapper)
      run: |
        python3 build_imgui_ci.py \
          $PWD/prebuilt/linux/x86_64 \
          $PWD/prebuilt/linux/x86_64
    
    - name: Create library info file
      run: |
        cat > prebuilt/linux/x86_64/library_info.txt << EOF
        Built on: $(date)
        Platform: Ubuntu $(lsb_release -rs)
        
        Libraries included:
        - SDL2 Version: 2.32.4
        - FreeType Version: 2.14.1
        - cimgui (Dear ImGui C wrapper) with SDL2/OpenGL3 backends
        
        Libraries:
        $(ls -la prebuilt/linux/x86_64/lib/)
        
        Headers:
        $(ls -la prebuilt/linux/x86_64/include/)
        EOF
    
    - name: List built files
      run: |
        echo "=== Built libraries ==="
        find prebuilt/linux/x86_64 -type f -name "*.so*" -o -name "*.a" | sort
        echo ""
        echo "=== Header files ==="
        find prebuilt/linux/x86_64/include -type f -name "*.h" | head -20
    
    - name: Create release archive
      run: |
        cd prebuilt/linux/x86_64
        zip -r ../../../gamelibs-linux-x86_64.zip .
        cd ../../..
        echo "Archive created: $(ls -lh gamelibs-linux-x86_64.zip)"
    
    - name: Generate release notes
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cat > release_notes.md << EOF
        ## Game Libraries Build
        
        **Date:** $(date -u +"%Y-%m-%d %H:%M UTC")
        **Platform:** Ubuntu Linux x86_64
        
        ### Included Libraries
        - **SDL2** v2.32.4 - Cross-platform multimedia library
        - **FreeType** v2.14.1 - Font rendering library
        - **cimgui** - Dear ImGui C wrapper with SDL2/OpenGL3 backends
        
        ### Build Configuration
        - SDL2: ALSA, PulseAudio, X11, Wayland, OpenGL, OpenGLES, Vulkan support
        - FreeType: PNG/zlib support, shared libraries
        
        ### Installation
        Extract the archive to your preferred location. The structure includes:
        - \`lib/\` - Compiled libraries (.so, .a files)
        - \`include/\` - Header files
        - \`bin/\` - Any executables (if applicable)
        - \`lib/pkgconfig/\` - pkg-config files
        
        ### Usage
        Set your build system to use:
        - Include path: \`<extracted_path>/include\`
        - Library path: \`<extracted_path>/lib\`
        EOF
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        name: Game Libraries ${{ github.ref_name }}
        body_path: release_notes.md
        files: gamelibs-linux-x86_64.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload artifact (non-release builds)
      if: "!startsWith(github.ref, 'refs/tags/')"
      uses: actions/upload-artifact@v4
      with:
        name: gamelibs-linux-x86_64
        path: gamelibs-linux-x86_64.zip
        retention-days: 7