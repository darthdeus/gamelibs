name: Build Game Libraries

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      clear_cache:
        description: 'Clear build cache'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    name: Build Ubuntu x86_64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate cache keys
      id: cache-keys
      run: |
        # Cache version - increment this to force cache rebuild
        CACHE_VERSION="v1"
        
        # Add manual cache clear suffix if requested
        if [ "${{ github.event.inputs.clear_cache }}" = "true" ]; then
          CACHE_SUFFIX="-cleared-$(date +%s)"
        else
          CACHE_SUFFIX=""
        fi
        
        # Generate hash of SDL2 source for cache key
        SDL2_HASH=$(find SDL2-2.32.4 -type f -name '*.c' -o -name '*.h' -o -name 'CMakeLists.txt' | head -100 | xargs sha256sum | sha256sum | cut -d' ' -f1)
        echo "sdl2-hash=${CACHE_VERSION}-${SDL2_HASH}${CACHE_SUFFIX}" >> $GITHUB_OUTPUT
        
        # Generate hash of FreeType source for cache key
        FT_HASH=$(find freetype-2.14.1 -type f -name '*.c' -o -name '*.h' -o -name 'CMakeLists.txt' | head -100 | xargs sha256sum | sha256sum | cut -d' ' -f1)
        echo "freetype-hash=${CACHE_VERSION}-${FT_HASH}${CACHE_SUFFIX}" >> $GITHUB_OUTPUT
        
        # Generate hash of cimgui source for cache key
        CIMGUI_HASH=$(find cimgui imgui_backends -type f -name '*.cpp' -o -name '*.h' -o -name '*.py' 2>/dev/null | xargs sha256sum 2>/dev/null | sha256sum | cut -d' ' -f1)
        echo "cimgui-hash=${CACHE_VERSION}-${CIMGUI_HASH}${CACHE_SUFFIX}" >> $GITHUB_OUTPUT
    
    - name: Cache SDL2 build
      id: cache-sdl2
      uses: actions/cache@v3
      with:
        path: |
          prebuilt/linux/x86_64/lib/libSDL2*
          prebuilt/linux/x86_64/include/SDL2
          prebuilt/linux/x86_64/lib/pkgconfig/sdl2.pc
          prebuilt/linux/x86_64/bin/sdl2-config
        key: sdl2-ubuntu-${{ steps.cache-keys.outputs.sdl2-hash }}
    
    - name: Cache FreeType build
      id: cache-freetype
      uses: actions/cache@v3
      with:
        path: |
          prebuilt/linux/x86_64/lib/libfreetype*
          prebuilt/linux/x86_64/include/freetype2
          prebuilt/linux/x86_64/lib/pkgconfig/freetype2.pc
        key: freetype-ubuntu-${{ steps.cache-keys.outputs.freetype-hash }}
    
    - name: Install build dependencies
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: |
          build-essential
          cmake
          ninja-build
          pkg-config
          libasound2-dev
          libpulse-dev
          libaudio-dev
          libjack-dev
          libsndio-dev
          libx11-dev
          libxext-dev
          libxrandr-dev
          libxcursor-dev
          libxfixes-dev
          libxi-dev
          libxinerama-dev
          libxxf86vm-dev
          libxss-dev
          libgl1-mesa-dev
          libdbus-1-dev
          libudev-dev
          libgles2-mesa-dev
          libegl1-mesa-dev
          libibus-1.0-dev
          fcitx-libs-dev
          libsamplerate0-dev
          libpipewire-0.3-dev
          libwayland-dev
          libdecor-0-dev
          libdrm-dev
          libgbm-dev
          libpng-dev
          zlib1g-dev
          libbz2-dev
        version: 1.0
    
    - name: Initialize submodules
      run: |
        git submodule update --init --recursive
    
    - name: Create build directories
      run: |
        mkdir -p build/SDL2
        mkdir -p build/freetype
        mkdir -p build/cimgui
        mkdir -p build/luajit
        mkdir -p prebuilt/linux/x86_64
    
    - name: Build SDL2
      if: steps.cache-sdl2.outputs.cache-hit != 'true'
      run: |
        cd build/SDL2
        cmake ../../SDL2-2.32.4 \
          -GNinja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PWD/../../prebuilt/linux/x86_64 \
          -DSDL_SHARED=ON \
          -DSDL_STATIC=ON \
          -DSDL_ALSA=ON \
          -DSDL_PULSEAUDIO=ON \
          -DSDL_X11=ON \
          -DSDL_WAYLAND=ON \
          -DSDL_OPENGL=ON \
          -DSDL_OPENGLES=ON \
          -DSDL_VULKAN=ON
        ninja -j$(nproc)
        ninja install
    
    - name: SDL2 cache status
      run: |
        if [ "${{ steps.cache-sdl2.outputs.cache-hit }}" = "true" ]; then
          echo "✓ SDL2 restored from cache"
        else
          echo "✓ SDL2 built from source"
        fi
        ls -la prebuilt/linux/x86_64/lib/libSDL2* || true
    
    - name: Build FreeType
      if: steps.cache-freetype.outputs.cache-hit != 'true'
      run: |
        cd build/freetype
        cmake ../../freetype-2.14.1 \
          -GNinja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PWD/../../prebuilt/linux/x86_64 \
          -DBUILD_SHARED_LIBS=ON \
          -DFT_DISABLE_HARFBUZZ=ON \
          -DFT_DISABLE_BROTLI=ON \
          -DFT_DISABLE_PNG=ON \
          -DFT_DISABLE_BZIP2=ON \
          -DFT_REQUIRE_ZLIB=OFF \
          -DFT_REQUIRE_BZIP2=OFF \
          -DFT_REQUIRE_PNG=OFF
        ninja -j$(nproc)
        ninja install
    
    - name: FreeType cache status
      run: |
        if [ "${{ steps.cache-freetype.outputs.cache-hit }}" = "true" ]; then
          echo "✓ FreeType restored from cache"
        else
          echo "✓ FreeType built from source"
        fi
        ls -la prebuilt/linux/x86_64/lib/libfreetype* || true
    
    - name: Build cimgui (ImGui C wrapper)
      run: |
        python3 build_imgui.py \
          $PWD/prebuilt/linux/x86_64 \
          $PWD/prebuilt/linux/x86_64
    
    - name: Build LuaJIT
      run: |
        cd luajit
        make -j$(nproc) PREFIX=$PWD/../prebuilt/linux/x86_64
        make install PREFIX=$PWD/../prebuilt/linux/x86_64
        cd ..
        echo "✓ LuaJIT built and installed"
    
    - name: Create library info file
      run: |
        cat > prebuilt/linux/x86_64/library_info.txt << EOF
        Built on: $(date)
        Platform: Ubuntu $(lsb_release -rs)
        
        Libraries included:
        - SDL2 Version: 2.32.4
        - FreeType Version: 2.14.1
        - cimgui (Dear ImGui C wrapper) with SDL2/OpenGL3 backends
        - LuaJIT 2.1 - Just-In-Time Compiler for Lua
        
        Libraries:
        $(ls -la prebuilt/linux/x86_64/lib/)
        
        Headers:
        $(ls -la prebuilt/linux/x86_64/include/)
        EOF
    
    - name: List built files
      run: |
        echo "=== Built libraries ==="
        find prebuilt/linux/x86_64 -type f -name "*.so*" -o -name "*.a" | sort
        echo ""
        echo "=== Header files ==="
        find prebuilt/linux/x86_64/include -type f -name "*.h" | head -20
    
    - name: Create release archive
      run: |
        cd prebuilt/linux/x86_64
        zip -r ../../../gamelibs-linux-x86_64.zip .
        cd ../../..
        echo "Archive created: $(ls -lh gamelibs-linux-x86_64.zip)"
    
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gamelibs-linux-x86_64
        path: gamelibs-linux-x86_64.zip
        retention-days: 7

  build-windows:
    runs-on: windows-latest
    name: Build Windows x86_64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Generate cache keys
      id: cache-keys
      shell: bash
      run: |
        # Cache version - increment this to force cache rebuild
        CACHE_VERSION="v1"
        
        # Add manual cache clear suffix if requested
        if [ "${{ github.event.inputs.clear_cache }}" = "true" ]; then
          CACHE_SUFFIX="-cleared-$(date +%s)"
        else
          CACHE_SUFFIX=""
        fi
        
        # Generate hash of SDL2 source for cache key
        SDL2_HASH=$(find SDL2-2.32.4 -type f -name '*.c' -o -name '*.h' -o -name 'CMakeLists.txt' | head -100 | xargs sha256sum | sha256sum | cut -d' ' -f1)
        echo "sdl2-hash=${CACHE_VERSION}-${SDL2_HASH}${CACHE_SUFFIX}" >> $GITHUB_OUTPUT
        
        # Generate hash of FreeType source for cache key
        FT_HASH=$(find freetype-2.14.1 -type f -name '*.c' -o -name '*.h' -o -name 'CMakeLists.txt' | head -100 | xargs sha256sum | sha256sum | cut -d' ' -f1)
        echo "freetype-hash=${CACHE_VERSION}-${FT_HASH}${CACHE_SUFFIX}" >> $GITHUB_OUTPUT
    
    - name: Cache SDL2 build
      id: cache-sdl2
      uses: actions/cache@v3
      with:
        path: |
          prebuilt/windows/x86_64/lib/SDL2*
          prebuilt/windows/x86_64/include/SDL2
          prebuilt/windows/x86_64/bin/SDL2.dll
        key: sdl2-windows-${{ steps.cache-keys.outputs.sdl2-hash }}
    
    - name: Cache FreeType build
      id: cache-freetype
      uses: actions/cache@v3
      with:
        path: |
          prebuilt/windows/x86_64/lib/freetype*
          prebuilt/windows/x86_64/include/freetype2
          prebuilt/windows/x86_64/bin/freetype.dll
        key: freetype-windows-${{ steps.cache-keys.outputs.freetype-hash }}
    
    - name: Initialize submodules
      run: |
        git submodule update --init --recursive
    
    - name: Create build directories
      shell: bash
      run: |
        mkdir -p build/SDL2
        mkdir -p build/freetype
        mkdir -p build/cimgui
        mkdir -p build/luajit
        mkdir -p prebuilt/windows/x86_64
    
    - name: Build SDL2
      if: steps.cache-sdl2.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd build\SDL2
        cmake ..\..\SDL2-2.32.4 ^
          -G "Visual Studio 17 2022" ^
          -A x64 ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DCMAKE_INSTALL_PREFIX=%CD%\..\..\prebuilt\windows\x86_64 ^
          -DSDL_SHARED=ON ^
          -DSDL_STATIC=ON
        cmake --build . --config Release --parallel
        cmake --install . --config Release
    
    - name: SDL2 cache status
      shell: bash
      run: |
        if [ "${{ steps.cache-sdl2.outputs.cache-hit }}" = "true" ]; then
          echo "✓ SDL2 restored from cache"
        else
          echo "✓ SDL2 built from source"
        fi
        ls -la prebuilt/windows/x86_64/lib/SDL2* || true
        ls -la prebuilt/windows/x86_64/bin/SDL2* || true
    
    - name: Build FreeType
      if: steps.cache-freetype.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd build\freetype
        cmake ..\..\freetype-2.14.1 ^
          -G "Visual Studio 17 2022" ^
          -A x64 ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DCMAKE_INSTALL_PREFIX=%CD%\..\..\prebuilt\windows\x86_64 ^
          -DBUILD_SHARED_LIBS=ON ^
          -DFT_DISABLE_HARFBUZZ=ON ^
          -DFT_DISABLE_BROTLI=ON ^
          -DFT_DISABLE_PNG=ON ^
          -DFT_DISABLE_BZIP2=ON ^
          -DFT_REQUIRE_ZLIB=OFF ^
          -DFT_REQUIRE_BZIP2=OFF ^
          -DFT_REQUIRE_PNG=OFF
        cmake --build . --config Release --parallel
        cmake --install . --config Release
    
    - name: FreeType cache status
      shell: bash
      run: |
        if [ "${{ steps.cache-freetype.outputs.cache-hit }}" = "true" ]; then
          echo "✓ FreeType restored from cache"
        else
          echo "✓ FreeType built from source"
        fi
        ls -la prebuilt/windows/x86_64/lib/freetype* || true
        ls -la prebuilt/windows/x86_64/bin/freetype* || true
    
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Build cimgui (ImGui C wrapper)
      shell: cmd
      run: |
        python build_imgui.py ^
          %cd%\prebuilt\windows\x86_64 ^
          %cd%\prebuilt\windows\x86_64
    
    - name: Build LuaJIT (Windows)
      shell: cmd
      run: |
        cd luajit\src
        call msvcbuild.bat
        xcopy luajit.exe ..\..\prebuilt\windows\x86_64\bin\ /Y
        xcopy lua51.dll ..\..\prebuilt\windows\x86_64\bin\ /Y
        xcopy lua51.lib ..\..\prebuilt\windows\x86_64\lib\ /Y
        xcopy luajit.h ..\..\prebuilt\windows\x86_64\include\ /Y
        xcopy lua.h ..\..\prebuilt\windows\x86_64\include\ /Y
        xcopy lauxlib.h ..\..\prebuilt\windows\x86_64\include\ /Y
        xcopy lualib.h ..\..\prebuilt\windows\x86_64\include\ /Y
        xcopy luaconf.h ..\..\prebuilt\windows\x86_64\include\ /Y
        xcopy lua.hpp ..\..\prebuilt\windows\x86_64\include\ /Y
        cd ..\..
        echo LuaJIT built and installed
    
    - name: Create library info file
      shell: bash
      run: |
        cat > prebuilt/windows/x86_64/library_info.txt << EOF
        Built on: $(date)
        Platform: Windows x86_64
        
        Libraries included:
        - SDL2 Version: 2.32.4
        - FreeType Version: 2.14.1
        - cimgui (Dear ImGui C wrapper) with SDL2/OpenGL3 backends
        - LuaJIT 2.1 - Just-In-Time Compiler for Lua
        
        Libraries:
        $(ls -la prebuilt/windows/x86_64/lib/)
        
        Binaries (DLLs):
        $(ls -la prebuilt/windows/x86_64/bin/)
        
        Headers:
        $(ls -la prebuilt/windows/x86_64/include/)
        EOF
    
    - name: List built files
      shell: bash
      run: |
        echo "=== Built libraries ==="
        find prebuilt/windows/x86_64 -type f -name "*.lib" -o -name "*.dll" | sort
        echo ""
        echo "=== Header files ==="
        find prebuilt/windows/x86_64/include -type f -name "*.h" | head -20
    
    - name: Create release archive
      shell: bash
      run: |
        cd prebuilt/windows/x86_64
        7z a -tzip ../../../gamelibs-windows-x86_64.zip *
        cd ../../..
        echo "Archive created: $(ls -lh gamelibs-windows-x86_64.zip)"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gamelibs-windows-x86_64
        path: gamelibs-windows-x86_64.zip
        retention-days: 7

  build-macos:
    runs-on: macos-latest
    name: Build macOS x86_64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Initialize submodules
      run: |
        git submodule update --init --recursive --depth=1 || git submodule update --init --recursive
    
    - name: Setup build environment
      run: |
        brew install cmake ninja pkg-config
        echo "Build environment ready"
    
    - name: Create build directories
      run: |
        mkdir -p build/{sdl2,freetype}
        mkdir -p prebuilt/macos/x86_64/{lib,bin,include}
    
    # Cache SDL2 build
    - name: Cache SDL2
      id: cache-sdl2
      uses: actions/cache@v4
      with:
        path: prebuilt/macos/x86_64
        key: macos-sdl2-${{ hashFiles('SDL2-2.32.4/**') }}-v1
        restore-keys: |
          macos-sdl2-
    
    - name: Build SDL2
      if: steps.cache-sdl2.outputs.cache-hit != 'true'
      run: |
        cd build/sdl2
        cmake ../../SDL2-2.32.4 \
          -GNinja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PWD/../../prebuilt/macos/x86_64 \
          -DSDL_SHARED=ON \
          -DSDL_STATIC=ON
        ninja -j$(sysctl -n hw.ncpu)
        ninja install
    
    - name: SDL2 cache status
      run: |
        if [ "${{ steps.cache-sdl2.outputs.cache-hit }}" = "true" ]; then
          echo "✓ SDL2 restored from cache"
        else
          echo "✓ SDL2 built from source"
        fi
        ls -la prebuilt/macos/x86_64/lib/libSDL2* || true
    
    # Cache FreeType build
    - name: Cache FreeType
      id: cache-freetype
      uses: actions/cache@v4
      with:
        path: prebuilt/macos/x86_64
        key: macos-freetype-${{ hashFiles('freetype-2.14.1/**') }}-v1
        restore-keys: |
          macos-freetype-
    
    - name: Build FreeType
      if: steps.cache-freetype.outputs.cache-hit != 'true'
      run: |
        cd build/freetype
        cmake ../../freetype-2.14.1 \
          -GNinja \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PWD/../../prebuilt/macos/x86_64 \
          -DBUILD_SHARED_LIBS=ON \
          -DFT_DISABLE_HARFBUZZ=ON \
          -DFT_DISABLE_BROTLI=ON \
          -DFT_DISABLE_PNG=ON \
          -DFT_DISABLE_BZIP2=ON \
          -DFT_REQUIRE_ZLIB=OFF \
          -DFT_REQUIRE_BZIP2=OFF \
          -DFT_REQUIRE_PNG=OFF
        ninja -j$(sysctl -n hw.ncpu)
        ninja install
    
    - name: FreeType cache status
      run: |
        if [ "${{ steps.cache-freetype.outputs.cache-hit }}" = "true" ]; then
          echo "✓ FreeType restored from cache"
        else
          echo "✓ FreeType built from source"
        fi
        ls -la prebuilt/macos/x86_64/lib/libfreetype* || true
    
    - name: Build cimgui (ImGui C wrapper)
      run: |
        python3 build_imgui.py \
          $PWD/prebuilt/macos/x86_64 \
          $PWD/prebuilt/macos/x86_64
    
    - name: Build LuaJIT
      run: |
        cd luajit
        make -j$(sysctl -n hw.ncpu) PREFIX=$PWD/../prebuilt/macos/x86_64 MACOSX_DEPLOYMENT_TARGET=10.12
        make install PREFIX=$PWD/../prebuilt/macos/x86_64
        cd ..
        echo "✓ LuaJIT built and installed"
    
    - name: Create library info file
      run: |
        cat > prebuilt/macos/x86_64/library_info.txt << EOF
        Built on: $(date)
        Platform: macOS $(sw_vers -productVersion)
        Architecture: x86_64
        
        Libraries included:
        - SDL2 Version: 2.32.4
        - FreeType Version: 2.14.1
        - cimgui (Dear ImGui C wrapper) with SDL2/OpenGL3 backends
        - LuaJIT Version: 2.1
        
        Library files:
        EOF
        echo "" >> prebuilt/macos/x86_64/library_info.txt
        echo "=== SDL2 ===" >> prebuilt/macos/x86_64/library_info.txt
        ls -la prebuilt/macos/x86_64/lib/libSDL2* >> prebuilt/macos/x86_64/library_info.txt
        echo "" >> prebuilt/macos/x86_64/library_info.txt
        echo "=== FreeType ===" >> prebuilt/macos/x86_64/library_info.txt
        ls -la prebuilt/macos/x86_64/lib/libfreetype* >> prebuilt/macos/x86_64/library_info.txt
        echo "" >> prebuilt/macos/x86_64/library_info.txt
        echo "=== cimgui ===" >> prebuilt/macos/x86_64/library_info.txt
        ls -la prebuilt/macos/x86_64/lib/cimgui* >> prebuilt/macos/x86_64/library_info.txt
        echo "" >> prebuilt/macos/x86_64/library_info.txt
        echo "=== LuaJIT ===" >> prebuilt/macos/x86_64/library_info.txt
        ls -la prebuilt/macos/x86_64/lib/libluajit* >> prebuilt/macos/x86_64/library_info.txt
    
    - name: List built libraries
      run: |
        echo "=== All library files ==="
        find prebuilt/macos/x86_64/lib -type f \( -name "*.dylib" -o -name "*.a" \) | sort
        echo ""
        echo "=== Header files ==="
        find prebuilt/macos/x86_64/include -type f -name "*.h" | head -20
    
    - name: Create release archive
      run: |
        cd prebuilt/macos/x86_64
        zip -r ../../../gamelibs-macos-x86_64.zip *
        cd ../../..
        echo "Archive created: $(ls -lh gamelibs-macos-x86_64.zip)"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gamelibs-macos-x86_64
        path: gamelibs-macos-x86_64.zip
        retention-days: 7

  create-release:
    needs: [build-ubuntu, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    name: Create Release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: gamelibs-linux-x86_64
    
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: gamelibs-windows-x86_64
    
    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: gamelibs-macos-x86_64
    
    - name: Generate release notes
      run: |
        cat > release_notes.md << EOF
        ## Game Libraries Build ${{ github.ref_name }}
        
        **Date:** $(date -u +"%Y-%m-%d %H:%M UTC")
        
        ### Included Libraries
        - **SDL2** v2.32.4 - Cross-platform multimedia library
        - **FreeType** v2.14.1 - Font rendering library
        - **cimgui** - Dear ImGui C wrapper with SDL2/OpenGL3 backends
        - **LuaJIT** 2.1 - Just-In-Time Compiler for Lua
        
        ### Platform Builds
        - **Linux x86_64** (\`gamelibs-linux-x86_64.zip\`)
          - SDL2: ALSA, PulseAudio, X11, Wayland, OpenGL, OpenGLES, Vulkan support
          - Shared libraries (.so) and static libraries (.a)
        
        - **Windows x86_64** (\`gamelibs-windows-x86_64.zip\`)
          - SDL2: DirectX, OpenGL, Vulkan support
          - Dynamic libraries (.dll) and import libraries (.lib)
        
        - **macOS x86_64** (\`gamelibs-macos-x86_64.zip\`)
          - SDL2: Metal, OpenGL, Vulkan support
          - Dynamic libraries (.dylib) and static libraries (.a)
        
        ### Installation
        1. Download the archive for your platform
        2. Extract to your preferred location
        3. The structure includes:
           - \`lib/\` - Compiled libraries
           - \`bin/\` - Runtime binaries (Windows: DLLs)
           - \`include/\` - Header files
           - \`lib/pkgconfig/\` - pkg-config files (Linux/macOS)
        
        ### Usage
        Set your build system to use:
        - Include path: \`<extracted_path>/include\`
        - Library path: \`<extracted_path>/lib\`
        - Runtime path (Windows): \`<extracted_path>/bin\`
        
        ### Building from Source
        See the [GitHub repository](https://github.com/${{ github.repository }}) for build instructions.
        EOF
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Game Libraries ${{ github.ref_name }}
        body_path: release_notes.md
        files: |
          gamelibs-linux-x86_64.zip
          gamelibs-windows-x86_64.zip
          gamelibs-macos-x86_64.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}